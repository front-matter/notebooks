<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>https://front-matter.io/</id><title>Popular BioRxiv bioinformatics preprints posted in the last week</title><updated>2021-05-24T05:58:18.484648+00:00</updated><author><name>Martin Fenner</name><email>martin@front-matter.io</email></author><link href="https://front-matter.io" rel="alternate"/><link href="https://front-matter.io/bioinformatics/feed.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator><entry><id>https://doi.org/10.1101/2021.05.21.445058</id><title>Assessing and removing the effect of unwanted technical variations in microbiome data (52 tweets)</title><updated>2021-05-24T05:58:18.485023+00:00</updated><author><name>Muhamad Fachrul</name></author><author><name>Guillaume Méric</name></author><author><name>Michael Inouye</name></author><author><name>Sünje Johanna Pamp</name></author><author><name>Agus Salim</name></author><content>&lt;p&gt;Varying technologies and experimental approaches used in microbiome studies often lead to irreproducible results due to unwanted technical variations. Such variations, often unaccounted for and of unknown source, may interfere with true biological signals, resulting in misleading biological conclusions. In this work, we aim to characterize the major sources of technical variations in microbiome data and demonstrate how a state-of-the art approach can minimize their impact on downstream analyses. We analyzed 184 pig faecal metagenomes encompassing 21 specific combinations of deliberately introduced factors of technical and biological variations. We identify several known experimental factors, specifically storage conditions and freeze-thaw cycles, as a likely major source of unwanted variation in metagenomes. We also observed that these unwanted technical variations do not affect taxa uniformly, with freezing samples affecting taxa of class Bacteroidia the most, for example. Additionally, we benchmarked the performance of a novel batch correcting tool used in this study, RUV-III-NB (https://github.com/limfuxing/ruvIIInb/), to other popular batch correction methods, including ComBat, ComBat-seq, RUVg, and RUVs. While RUV-III-NB performed consistently robustly across our sensitivity and specificity metrics, most other methods did not remove unwanted variations optimally, with RUVg even overcorrecting and removing some of the true biological signals from the samples. Our analyses suggests that a careful consideration of possible technical confounders is critical in the experimental design of microbiome studies to ensure accurate biological reading of microbial taxa of interest, and that the inclusion of technical replicates is necessary to efficiently remove unwanted variations computationally.&lt;/p&gt;</content><link href="https://doi.org/10.1101/2021.05.21.445058" rel="alternate" title="Assessing and removing the effect of unwanted technical variations in microbiome data (52 tweets)"/><category term="Bioinformatics"/><published>2021-05-22T00:00:00+00:00</published></entry><entry><id>https://doi.org/10.1101/2021.05.14.443910</id><title>riboviz 2: A flexible and robust ribosome profiling data analysis and visualization workflow (35 tweets)</title><updated>2021-05-24T05:58:18.485519+00:00</updated><author><name>Alexander L. Cope</name></author><author><name>Felicity Anderson</name></author><author><name>John Favate</name></author><author><name>Michael Jackson</name></author><author><name>Amanda Mok</name></author><author><name>Anna Kurowska</name></author><author><name>Emma MacKenzie</name></author><author><name>Vikram Shivakumar</name></author><author><name>Peter Tilton</name></author><author><name>Sophie M. Winterbourne</name></author><author><name>Siyin Xue</name></author><author><name>Kostas Kavoussanakis</name></author><author><name>Liana F. Lareau</name></author><author><name>Premal Shah</name></author><author><name>Edward W.J. Wallace</name></author><content>&lt;sec&gt;&lt;title&gt;Motivation&lt;/title&gt;&lt;p&gt;Ribosome profiling, or Ribo-seq, is the state of the art method for quantifying protein synthesis in living cells. Computational analysis of Ribo-seq data remains challenging due to the complexity of the procedure, as well as variations introduced for specific organisms or specialized analyses. Many bioinformatic pipelines have been developed, but these pipelines have key limitations in terms of functionality or usability.&lt;/p&gt;&lt;/sec&gt;&lt;sec&gt;&lt;title&gt;Results&lt;/title&gt;&lt;p&gt;We present riboviz 2, an updated riboviz package, for the comprehensive transcript-centric analysis and visualization of Ribo-seq data. riboviz 2 includes an analysis workflow built on the Nextflow workflow management system, combining freely available software with custom code. The package is extensively documented and provides example configuration files for organisms spanning the domains of life. riboviz 2 is distinguished by clear separation of concerns between annotation and analysis: prior to a run, the user chooses a transcriptome in FASTA format, paired with annotation for the CDS locations in GFF3 format. The user is empowered to choose the relevant transcriptome for their biological question, or to run alternative analyses that address distinct questions. riboviz 2 has been extensively tested on various library preparation strategies, including multiplexed samples. riboviz 2 is flexible and uses open, documented file formats, allowing users to integrate new analyses with the pipeline.&lt;/p&gt;&lt;/sec&gt;&lt;sec&gt;&lt;title&gt;Availability&lt;/title&gt;&lt;p&gt;riboviz 2 is freely available at github.com/riboviz/riboviz.&lt;/p&gt;&lt;/sec&gt;&lt;sec&gt;&lt;title&gt;Supplementary information&lt;/title&gt;&lt;/sec&gt;</content><link href="https://doi.org/10.1101/2021.05.14.443910" rel="alternate" title="riboviz 2: A flexible and robust ribosome profiling data analysis and visualization workflow (35 tweets)"/><category term="Bioinformatics"/><published>2021-05-17T00:00:00+00:00</published></entry><entry><id>https://doi.org/10.1101/2021.05.21.445151</id><title>Vcflib and tools for processing the VCF variant call format (18 tweets)</title><updated>2021-05-24T05:58:18.486076+00:00</updated><author><name>Erik Garrison</name></author><author><name>Zev N Kronenberg</name></author><author><name>Eric T Dawson</name></author><author><name>Brent S Pedersen</name></author><author><name>Pjotr Prins</name></author><content>&lt;p&gt;Since its introduction in 2011 the variant call format (VCF) has been widely adopted for processing DNA and RNA variants in practically all population studies --- as well as in somatic and germline mutation studies. VCF can present single nucleotide variants, multi-nucleotide variants, insertions and deletions, and simple structural variants called against a reference genome. Here we present over 125 useful and much used free and open source software tools and libraries, part of vcflib tools and bio-vcf. We also highlight cyvcf2, hts-nim and slivar tools. Application is typically in the comparison, filtering, normalisation, smoothing, annotation, statistics, visualisation and exporting of variants. Our tools run daily and invisibly in pipelines and countless shell scripts. Our tools are part of a wider bioinformatics ecosystem and we consider it very important to make these tools available as free and open source software to all bioinformaticians so they can be deployed through software distributions, such as Debian, GNU Guix and Bioconda. vcflib, for example, was installed over 40,000 times and bio-vcf was installed over 15,000 times through Bioconda by December 2020. We shortly discuss the design of VCF, lessons learnt, and how we can address more complex variation that can not easily be represented by the VCF format. All source code is published under free and open source software licenses and can be downloaded and installed from https://github.com/vcflib.&lt;/p&gt;</content><link href="https://doi.org/10.1101/2021.05.21.445151" rel="alternate" title="Vcflib and tools for processing the VCF variant call format (18 tweets)"/><category term="Bioinformatics"/><published>2021-05-23T00:00:00+00:00</published></entry><entry><id>https://doi.org/10.1101/2021.05.21.445045</id><title>PARROT: a flexible recurrent neural network framework for analysis of large protein datasets (17 tweets)</title><updated>2021-05-24T05:58:18.486345+00:00</updated><author><name>Daniel Griffith</name></author><author><name>Alex S Holehouse</name></author><content>&lt;p&gt;The rise of high-throughput experiments has transformed how scientists approach biological questions. The ubiquity of large-scale assays that can test thousands of samples in a day has necessitated the development of new computational approaches to interpret this data. Among these tools, machine learning approaches are increasingly being utilized due to their ability to infer complex non-linear patterns from high-dimensional data. Despite their effectiveness, machine learning (and in particular deep learning) approaches are not always accessible or easy to implement for those with limited computational expertise. Here we present PARROT, a general framework for training and applying deep learning-based predictors on large protein datasets. Using an internal recurrent neural network architecture, PARROT is capable of tackling both classification and regression tasks while only requiring raw protein sequences as input. We showcase the potential uses of PARROT on three diverse machine learning tasks: predicting phosphorylation sites, predicting transcriptional activation function of peptides generated by high-throughput reporter assays, and predicting the fibrillization propensity of amyloid-beta with data generated by deep mutational scanning. Through these examples, we demonstrate that PARROT is easy to use, performs comparably to state-of-the-art computational tools, and is applicable for a wide array of biological problems.&lt;/p&gt;</content><link href="https://doi.org/10.1101/2021.05.21.445045" rel="alternate" title="PARROT: a flexible recurrent neural network framework for analysis of large protein datasets (17 tweets)"/><category term="Bioinformatics"/><published>2021-05-23T00:00:00+00:00</published></entry><entry><id>https://doi.org/10.1101/2021.05.18.444610</id><title>BleTIES: Annotation of natural genome editing in ciliates using long read sequencing (7 tweets)</title><updated>2021-05-24T05:58:18.486642+00:00</updated><author><name>Brandon K. B. Seah</name></author><author><name>Estienne C. Swart</name></author><content>&lt;sec&gt;&lt;title&gt;Summary&lt;/title&gt;&lt;p&gt;Ciliates are single-celled eukaryotes that eliminate specific, interspersed DNA sequences (internally eliminated sequences, IESs) from their genomes during development. These are challenging to annotate and assemble because IES-containing sequences are much less abundant in the cell than those without, and IES sequences themselves often contain repetitive and low-complexity sequences. Long read sequencing technologies from Pacific Biosciences and Oxford Nanopore have the potential to reconstruct longer IESs than has been possible with short reads, and also the ability to detect correlations of neighboring element elimination. Here we present BleTIES, a software toolkit for detecting, assembling, and analyzing IESs using mapped long reads.&lt;/p&gt;&lt;/sec&gt;&lt;sec&gt;&lt;title&gt;Availability and implementation&lt;/title&gt;&lt;p&gt;BleTIES is implemented in Python 3. Source code is available at &lt;ext-link xmlns:xlink="http://www.w3.org/1999/xlink" ext-link-type="uri" xlink:href="https://github.com/Swart-lab/bleties"&gt;https://github.com/Swart-lab/bleties&lt;/ext-link&gt; (MIT license), and also distributed via Bioconda.&lt;/p&gt;&lt;/sec&gt;&lt;sec&gt;&lt;title&gt;Contact&lt;/title&gt;&lt;p&gt;Contact: &lt;email&gt;kb.seah@tuebingen.mpg.de&lt;/email&gt;&lt;/p&gt;&lt;/sec&gt;&lt;sec sec-type="supplementary-material"&gt;&lt;title&gt;Supplementary information&lt;/title&gt;&lt;p&gt;Benchmarking of BleTIES with published sequence data.&lt;/p&gt;&lt;/sec&gt;</content><link href="https://doi.org/10.1101/2021.05.18.444610" rel="alternate" title="BleTIES: Annotation of natural genome editing in ciliates using long read sequencing (7 tweets)"/><category term="Bioinformatics"/><published>2021-05-18T00:00:00+00:00</published></entry><entry><id>https://doi.org/10.1101/2021.05.18.444607</id><title>Using Machine Learning to design AAV2 with high likelihood of viral assembly (5 tweets)</title><updated>2021-05-24T05:58:18.486901+00:00</updated><author><name>Cuong T. To</name></author><author><name>Christian Wirsching</name></author><content>&lt;p&gt;We study the application of Machine Learning in designing AAV2 capsid sequences with high likelihood of viral assembly, i.e. capsid viability. Specifically, we design and implement Origami, a model-based optimization algorithm, to identify highly viable capsid sequences within the vast space of 20&lt;sup&gt;33&lt;/sup&gt; possibilities. Our evaluation shows that Origami performs well in terms of optimality and diversity of model-designed sequences. Moreover, these sequences are ranked according to their viability score. This helps designing experiments given budget constraint.&lt;/p&gt;</content><link href="https://doi.org/10.1101/2021.05.18.444607" rel="alternate" title="Using Machine Learning to design AAV2 with high likelihood of viral assembly (5 tweets)"/><category term="Bioinformatics"/><published>2021-05-18T00:00:00+00:00</published></entry></feed>